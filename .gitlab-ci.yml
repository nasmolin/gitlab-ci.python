
stages:
  - lint
  - build
  - deploy
  - helpers

#----------------------------------------
# Development CI/CD
#----------------------------------------
Lint:Dev:
  stage: lint
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  tags: 
    - docker
  image: python:3.10-slim
  script:
    - pip install flake8
    - flake8 ./app/ --max-line-length=120
  allow_failure: true

Build:Dev:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  tags: 
    - docker
  image: 
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache=true --cache-copy-layers --cache-ttl=48h
      --context .
      --dockerfile docker/Dockerfile.dev
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}
  needs: ["Lint:Dev"]

Update-nginx:Dev:
  stage: deploy
  tags: 
    - shell
  script:
    - chmod +x ./scripts/update-nginx.sh 
    - sudo ./scripts/update-nginx.sh "dev.subdomain.app.local"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - nginx/dev.subdomain.app.local
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
  needs: ["Build:Dev"]

Deploy:Dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  environment: 
    name: Dev
    url: https://dev.subdomain.app.local/
  tags: 
   - shell
  variables:
    DB_NAME: ${DEV_DB_NAME}
    DB_USER: ${DEV_DB_USER}
    DB_PASS: ${DEV_DB_PASS}
    DB_HOST: ${DEV_DB_HOST}
    DB_PORT: ${DEV_DB_PORT}
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker compose -p app-dev -f docker/compose.dev.yaml pull
    - docker compose -p app-dev -f docker/compose.dev.yaml up -d --build
  dependencies: []


Health-check:Dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  tags: 
    - docker
  image: python:3.10-slim
  script:
    - pip install requests argparse
    - python scripts/health-check.py https://dev.subdomain.app.local/
  needs: ["Deploy:Dev"]


#----------------------------------------
# Production CI/CD
#----------------------------------------

Lint:Prod:
  stage: lint
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
  tags: 
    - docker
  image: python:3.10-slim
  script:
    - pip install flake8
    - flake8 ./appweb/ --max-line-length=120
  allow_failure: true

Build:Prod:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
  tags: 
    - docker
  image: 
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache=true --cache-copy-layers --cache-ttl=48h
      --context .
      --dockerfile docker/Dockerfile.prod
      --destination ${CI_REGISTRY_IMAGE}:production
  needs: ["Lint:Prod"]

Update-nginx:Prod:
  stage: deploy
  tags: 
    - shell
  script:
    - chmod +x ./scripts/update-nginx.sh
    - sudo ./scripts/update-nginx.sh "subdomain.app.local"
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - nginx/subdomain.app.local
    - if: $CI_COMMIT_BRANCH == "production"
      when: manual
  needs: ["Build:Prod"]

Deploy:Prod:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
  environment: 
    name: Prod
    url: https://app.local/
  tags: 
   - shell
  variables:
    DB_NAME: ${PRODUCTION_DB_NAME}
    DB_USER: ${PRODUCTION_DB_USER}
    DB_PASS: ${PRODUCTION_DB_PASS}
    DB_HOST: ${PRODUCTION_DB_HOST}
    DB_PORT: ${PRODUCTION_DB_PORT}
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker compose -p app-production -f docker/compose.prod.yaml pull
    - docker compose -p app-production -f docker/compose.prod.yaml up -d --build
  dependencies: []

Health-check:Prod:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
  tags: 
    - docker
  image: python:3.10-slim
  script:
    - pip install requests argparse
    - python scripts/health-check.py https://app.local/
  needs: ["Deploy:Prod"]


